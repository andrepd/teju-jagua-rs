super::mk_impl::mk_impl! {
    float = f32,
    mant = u32,
    mant_signed = i32,
    mant_double = u64,
    len_mantissa = crate::teju::fmt::len_u64,
    print_mantissa = crate::teju::fmt::print_u64_mantissa,
    print_mantissa_known_len = crate::teju::fmt::print_u64_mantissa_known_len,
    tests = {
        pi = {
            dec = "3.1415927",
            exp = "3.1415927e0",
            decimal = Decimal{ exp: -7, mant: 3_1415927 },
        },
        e = {
            dec = "2.7182817",
            exp = "2.7182817e0",
            decimal = Decimal{ exp: -7, mant: 2_7182817 },
        },
        ln2 = {
            dec = "0.6931472",
            exp = "6.931472e-1",
            decimal = Decimal{ exp: -7, mant: 0_6931472 },
        },
        min_subnormal = {
            dec = "0.000000000000000000000000000000000000000000001",
            exp = "1e-45",
            decimal = Decimal{ exp: -45, mant: 1 },
        },
        min_normal = {
            dec = "0.000000000000000000000000000000000000011754944",
            exp = "1.1754944e-38",
            decimal = Decimal{ exp: -38-7, mant: 1_1754944 },
        },
        max = {
            dec = "340282350000000000000000000000000000000.0",
            exp = "3.4028235e38",
            decimal = Decimal{ exp: 38-7, mant: 3_4028235 },
        },
    }
}

pub mod lut {
    use crate::teju::common::{Multiplier, Multipliers, MultInverse, MultInverses};
    use super::Mant;

    // TODO: generate with crabtime

    pub const MULTIPLIERS: Multipliers<Mant, 77, {super::Binary::MIN_EXP}> = Multipliers::new([
        Multiplier{ hi: 0xb35dbf82, lo: 0x1ae4f38c },
        Multiplier{ hi: 0x8f7e32ce, lo: 0x7bea5c70 },
        Multiplier{ hi: 0xe596b7b0, lo: 0xc643c71a },
        Multiplier{ hi: 0xb7abc627, lo: 0x050305ae },
        Multiplier{ hi: 0x92efd1b8, lo: 0xd0cf37bf },
        Multiplier{ hi: 0xeb194f8e, lo: 0x1ae525fe },
        Multiplier{ hi: 0xbc143fa4, lo: 0xe250eb32 },
        Multiplier{ hi: 0x96769950, lo: 0xb50d88f5 },
        Multiplier{ hi: 0xf0bdc21a, lo: 0xbb48db21 },
        Multiplier{ hi: 0xc097ce7b, lo: 0xc90715b4 },
        Multiplier{ hi: 0x9a130b96, lo: 0x3a6c115d },
        Multiplier{ hi: 0xf684df56, lo: 0xc3e01bc7 },
        Multiplier{ hi: 0xc5371912, lo: 0x364ce306 },
        Multiplier{ hi: 0x9dc5ada8, lo: 0x2b70b59e },
        Multiplier{ hi: 0xfc6f7c40, lo: 0x45812297 },
        Multiplier{ hi: 0xc9f2c9cd, lo: 0x04674edf },
        Multiplier{ hi: 0xa18f07d7, lo: 0x36b90be6 },
        Multiplier{ hi: 0x813f3978, lo: 0xf8940985 },
        Multiplier{ hi: 0xcecb8f27, lo: 0xf4200f3b },
        Multiplier{ hi: 0xa56fa5b9, lo: 0x9019a5c9 },
        Multiplier{ hi: 0x84595161, lo: 0x401484a1 },
        Multiplier{ hi: 0xd3c21bce, lo: 0xcceda101 },
        Multiplier{ hi: 0xa968163f, lo: 0x0a57b401 },
        Multiplier{ hi: 0x87867832, lo: 0x6eac9001 },
        Multiplier{ hi: 0xd8d726b7, lo: 0x177a8001 },
        Multiplier{ hi: 0xad78ebc5, lo: 0xac620001 },
        Multiplier{ hi: 0x8ac72304, lo: 0x89e80001 },
        Multiplier{ hi: 0xde0b6b3a, lo: 0x76400001 },
        Multiplier{ hi: 0xb1a2bc2e, lo: 0xc5000001 },
        Multiplier{ hi: 0x8e1bc9bf, lo: 0x04000001 },
        Multiplier{ hi: 0xe35fa931, lo: 0xa0000001 },
        Multiplier{ hi: 0xb5e620f4, lo: 0x80000001 },
        Multiplier{ hi: 0x9184e72a, lo: 0x00000001 },
        Multiplier{ hi: 0xe8d4a510, lo: 0x00000001 },
        Multiplier{ hi: 0xba43b740, lo: 0x00000001 },
        Multiplier{ hi: 0x9502f900, lo: 0x00000001 },
        Multiplier{ hi: 0xee6b2800, lo: 0x00000001 },
        Multiplier{ hi: 0xbebc2000, lo: 0x00000001 },
        Multiplier{ hi: 0x98968000, lo: 0x00000001 },
        Multiplier{ hi: 0xf4240000, lo: 0x00000001 },
        Multiplier{ hi: 0xc3500000, lo: 0x00000001 },
        Multiplier{ hi: 0x9c400000, lo: 0x00000001 },
        Multiplier{ hi: 0xfa000000, lo: 0x00000001 },
        Multiplier{ hi: 0xc8000000, lo: 0x00000001 },
        Multiplier{ hi: 0xa0000000, lo: 0x00000001 },
        Multiplier{ hi: 0x80000000, lo: 0x00000001 },
        Multiplier{ hi: 0xcccccccc, lo: 0xcccccccd },
        Multiplier{ hi: 0xa3d70a3d, lo: 0x70a3d70b },
        Multiplier{ hi: 0x83126e97, lo: 0x8d4fdf3c },
        Multiplier{ hi: 0xd1b71758, lo: 0xe219652c },
        Multiplier{ hi: 0xa7c5ac47, lo: 0x1b478424 },
        Multiplier{ hi: 0x8637bd05, lo: 0xaf6c69b6 },
        Multiplier{ hi: 0xd6bf94d5, lo: 0xe57a42bd },
        Multiplier{ hi: 0xabcc7711, lo: 0x8461cefd },
        Multiplier{ hi: 0x89705f41, lo: 0x36b4a598 },
        Multiplier{ hi: 0xdbe6fece, lo: 0xbdedd5bf },
        Multiplier{ hi: 0xafebff0b, lo: 0xcb24aaff },
        Multiplier{ hi: 0x8cbccc09, lo: 0x6f5088cc },
        Multiplier{ hi: 0xe12e1342, lo: 0x4bb40e14 },
        Multiplier{ hi: 0xb424dc35, lo: 0x095cd810 },
        Multiplier{ hi: 0x901d7cf7, lo: 0x3ab0acda },
        Multiplier{ hi: 0xe69594be, lo: 0xc44de15c },
        Multiplier{ hi: 0xb877aa32, lo: 0x36a4b44a },
        Multiplier{ hi: 0x9392ee8e, lo: 0x921d5d08 },
        Multiplier{ hi: 0xec1e4a7d, lo: 0xb69561a6 },
        Multiplier{ hi: 0xbce50864, lo: 0x92111aeb },
        Multiplier{ hi: 0x971da050, lo: 0x74da7bef },
        Multiplier{ hi: 0xf1c90080, lo: 0xbaf72cb2 },
        Multiplier{ hi: 0xc16d9a00, lo: 0x95928a28 },
        Multiplier{ hi: 0x9abe14cd, lo: 0x44753b53 },
        Multiplier{ hi: 0xf79687ae, lo: 0xd3eec552 },
        Multiplier{ hi: 0xc6120625, lo: 0x76589ddb },
        Multiplier{ hi: 0x9e74d1b7, lo: 0x91e07e49 },
        Multiplier{ hi: 0xfd87b5f2, lo: 0x8300ca0e },
        Multiplier{ hi: 0xcad2f7f5, lo: 0x359a3b3f },
        Multiplier{ hi: 0xa2425ff7, lo: 0x5e14fc32 },
        Multiplier{ hi: 0x81ceb32c, lo: 0x4b43fcf5 },
    ]);

    pub const MULT_INVERSES: MultInverses<Mant, 14> = MultInverses::new([
        MultInverse{ multiplier: 0x00000001, bound: 0xffffffff },
        MultInverse{ multiplier: 0xcccccccd, bound: 0x33333333 },
        MultInverse{ multiplier: 0xc28f5c29, bound: 0x0a3d70a3 },
        MultInverse{ multiplier: 0x26e978d5, bound: 0x020c49ba },
        MultInverse{ multiplier: 0x3afb7e91, bound: 0x0068db8b },
        MultInverse{ multiplier: 0x0bcbe61d, bound: 0x0014f8b5 },
        MultInverse{ multiplier: 0x68c26139, bound: 0x000431bd },
        MultInverse{ multiplier: 0xae8d46a5, bound: 0x0000d6bf },
        MultInverse{ multiplier: 0x22e90e21, bound: 0x00002af3 },
        MultInverse{ multiplier: 0x3a2e9c6d, bound: 0x00000897 },
        MultInverse{ multiplier: 0x3ed61f49, bound: 0x000001b7 },
        MultInverse{ multiplier: 0x0c913975, bound: 0x00000057 },
        MultInverse{ multiplier: 0xcf503eb1, bound: 0x00000011 },
        MultInverse{ multiplier: 0xf6433fbd, bound: 0x00000003 },
    ]);
}